# vim: fdm=marker fmr=\ 〈,\ 〉

snippet abb "Define an abbreviation" b
${1:Prefix:[c|cno|i|ino]}abbrev ${2:[e-<expr>|b-<buffer>]} ${3:lhs} ${4:rhs}
$0
endsnippet

snippet #! "Exit quickly if already sourced" b
" vim: fdm=marker
" GUARD {{{1
if exists("${1:s:loaded}") || &cp || version < 700
  finish
endif
let $1 = 1
" }}}1
endsnippet

snippet ifunix "if on *nix system" b
if has('unix')
  ${1:${VISUAL}}
endif$0
endsnippet

snippet ifwin "if on windows system" b
if has('win32') || has('win64')
  ${1:${VISUAL}}
endif$0
endsnippet

snippet ifsys "if on ... system" b
if has('win32') || has('win64')
  ${1:${VISUAL}}
elseif has('mac') || has('macunix')
  ${2:${VISUAL}}
elseif has('unix')
  ${3:${VISUAL}}
endif$0
endsnippet

snippet ap "autoload path" i
`!v substitute(substitute(expand('%:p:r'), '^.\+autoload[/\\]\(.*\)', '\1', ''), '[/\\]', '#', 'g')`#
endsnippet

snippet echoc "echohl ..." b
echohl ${1:WarningMsg}
echo ${2:'colored output here ...'}
echohl None
endsnippet

snippet const "let ... | lockvar ..." b
let ${1:name} = ${2:value} | lockvar $1
$0
endsnippet

snippet const= "unlock & change value & lock" b
unlockvar ${1:name}${2: | }let $1 = ${3:value}$2lockvar $1
endsnippet

snippet '\s*f([adr])?([1-9])?' "smart function definition" br
`!p
param_strings = {'a': 'abort', 'd': 'dict', 'r': 'range'}
param         = match.group(1)
fold_lvl      = match.group(2)
`function! ${1:name}(${2:...})`!p if param: snip.rv = ' ' + param_strings[param]``!p if fold_lvl: snip.rv = ' " {{{' + fold_lvl`
" TODO${3}: implement $1($2)
$0
endfunction `!p if fold_lvl: snip.rv = '" }}}' + fold_lvl`
endsnippet

# plugtmp -> plugin interface file template 〈
snippet plugtmp "plugin interface file template" b
if exists('g:loaded_${1:name}') | finish | endif

let s:save_cpo = &cpo
set cpo&vim

if !has('nvim')
    echohl Error
    echom "Sorry this plugin only works with versions of neovim that support lua"
    echohl clear
    finish
endif

let g:loaded_$1 = 1

lua require('$1').${2:generate_command()}

let &cpo = s:save_cpo
unlet s:save_cpo
endsnippet
# 〉

